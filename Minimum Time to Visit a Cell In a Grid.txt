class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {

        int m = grid.size();
        int n = grid[0].size();

        vector<int> visited(m * n, -1);

        priority_queue<pair<int, int>, vector<pair<int, int>>,
                       greater<pair<int, int>>>
            v;

        v.push({0, 0});
        visited[0] = 0;
        vector<int> dir = {0, -1, 0, 1, 0};

        if (grid[1][0] > 1 && grid[0][1] > 1)
            return -1;

        while (v.size() > 0) {

            auto node = v.top();
            v.pop();

            int row = node.second / n;
            int col = node.second % n;

            int val = node.second;

            int t = node.first;

            if (row == m - 1 && col == n - 1) {
                return t;
            }
            for (int j = 0; j < 4; j++) {

                int r = row + dir[j];
                int cl = col + dir[j + 1];

                if (r < 0 || r >= m || cl < 0 || cl >= n)
                    continue;

                int val = r * n + cl;
                if (visited[val] != -1)
                    continue;

                if (grid[r][cl] <= t + 1)
                    visited[val] = t + 1;
                else if ((t + 1) % 2 != grid[r][cl] % 2)
                    visited[val] = grid[r][cl] + 1;
                else
                    visited[val] = grid[r][cl];
                v.push({visited[val], val});
            }
        }

        return -1;
    }
};